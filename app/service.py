import asyncio
import logging
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

from aiogram import Bot
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError, TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
try:
    from database import get_subscriptions_for_notification_check, DATABASE_FILE
    import aiosqlite # –ù—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TG username –≤ notify_admins...
except ImportError as e:
     logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ database.py –≤ service.py: {e}")
     exit()

load_dotenv()

ADMIN_IDS_STR = os.getenv("ADMIN_IDS")
ADMIN_IDS = []
if ADMIN_IDS_STR:
    try:
        ADMIN_IDS = list(map(int, ADMIN_IDS_STR.split(",")))
    except ValueError:
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_IDS –≤ .env")
else:
    logging.warning("ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –ù–û–í–û–ú –ø–ª–∞—Ç–µ–∂–µ ---
async def notify_admins_about_new_payment(bot: Bot, user_id: int, tw_username: str, tx_hash: str, amount: float, purchase_date: str, subscription_end: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram username –∏–∑ –±–∞–∑—ã
        tg_username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        try:
            async with aiosqlite.connect(DATABASE_FILE) as db:
               async with db.execute("SELECT username FROM users WHERE user_id = ?", (user_id,)) as cursor:
                   user_info = await cursor.fetchone()
                   if user_info and user_info[0]:
                       tg_username = user_info[0]
        except Exception as db_err:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è tg_username –¥–ª—è user_id {user_id} –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {db_err}")

        message = (
            "üí∞ *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!*\n\n"
            f"üë§ Telegram ID: `{user_id}`\n"
            f"üë§ Telegram: @{tg_username}\n"
            f"üë§ TradingView: **{tw_username}**\n" # –í—ã–¥–µ–ª—è–µ–º TW username
            f"üîó Hash: `{tx_hash}`\n"
            f"üíµ –°—É–º–º–∞: *{amount} USDT*\n"
            f"üìÖ –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {purchase_date}\n"
            f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: *{subscription_end}*"
        )

        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id} –æ –ø–ª–∞—Ç–µ–∂–µ user_id {user_id}: {e}")

    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notify_admins_about_new_payment –¥–ª—è user_id {user_id}: {e}")


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def check_subscriptions(bot: Bot, texts: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–∞—Ä (user_id, tw_username)
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∞–º.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
    current_date = datetime.now().date() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    expiring_count = 0
    expired_count = 0

    try:
        subscriptions_to_check = await get_subscriptions_for_notification_check()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(subscriptions_to_check)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

        for user_id, tw_username, sub_end_str, lang, tg_username in subscriptions_to_check:
            try:
                sub_end_date = datetime.strptime(sub_end_str, "%Y-%m-%d").date()
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{sub_end_str}' –¥–ª—è user_id={user_id}, tw_username='{tw_username}'. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            lang = lang or 'en' # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω
            days_until_expiry = (sub_end_date - current_date).days

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–æ—Ä–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ (1-3 –¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            if 0 <= days_until_expiry < 3:
                days_left = days_until_expiry + 1 # –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å (1, 2 –∏–ª–∏ 3)
                try:
                    warning_msg = texts.get(lang, texts['en'])["subscription_warning_for"].format(
                        tw_username=tw_username,
                        days=days_left,
                        date=sub_end_str
                    )
                    await bot.send_message(user_id, warning_msg, parse_mode="Markdown")
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï user_id={user_id} –¥–ª—è TW='{tw_username}' (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
                    expiring_count += 1
                except TelegramForbiddenError:
                     logging.warning(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                except TelegramBadRequest as e:
                     logging.warning(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ user_id={user_id}. –û—à–∏–±–∫–∞: {e}")
                except Exception as e:
                    logging.error(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ user_id={user_id}, TW='{tw_username}': {e}")
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è < —Å–µ–≥–æ–¥–Ω—è)
            elif days_until_expiry < 0:
                try:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    expired_msg = texts.get(lang, texts['en'])["subscription_expired_for"].format(
                        tw_username=tw_username,
                        date=sub_end_str
                    )
                    await bot.send_message(user_id, expired_msg, parse_mode="Markdown")
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ò–°–¢–ï–ß–ï–ù–ò–ò user_id={user_id} –¥–ª—è TW='{tw_username}' (–∏—Å—Ç–µ–∫–ª–∞ {sub_end_str})")
                    expired_count += 1

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                    tg_username_display = tg_username if tg_username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    admin_message = (
                        f"‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!*\n\n"
                        f"üë§ Telegram ID: `{user_id}`\n"
                        f"üë§ Telegram: @{tg_username_display}\n"
                        f"üë§ TradingView: **{tw_username}**\n"
                        f"üìÖ –ò—Å—Ç–µ–∫–ª–∞: {sub_end_str}"
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å
                    )
                    for admin_id in ADMIN_IDS:
                        try:
                             await bot.send_message(admin_id, admin_message, parse_mode="Markdown")
                        except Exception as e_admin:
                             logging.error(f"–ò–°–¢–ï–ß–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id} –¥–ª—è user {user_id}, TW {tw_username}: {e_admin}")

                except TelegramForbiddenError:
                    logging.warning(f"–ò–°–¢–ï–ß–ï–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    tg_username_display = tg_username if tg_username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    admin_message = (
                        f"‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ (–ë–û–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú)*\n\n"
                        f"üë§ Telegram ID: `{user_id}`\n"
                        f"üë§ Telegram: @{tg_username_display}\n"
                        f"üë§ TradingView: **{tw_username}**\n"
                        f"üìÖ –ò—Å—Ç–µ–∫–ª–∞: {sub_end_str}"
                    )
                    for admin_id in ADMIN_IDS:
                        try:
                            await bot.send_message(admin_id, admin_message, parse_mode="Markdown")
                        except Exception as e_admin:
                            logging.error(f"–ò–°–¢–ï–ß–ï–ù–ò–ï (–ë–æ—Ç –∑–∞–±–ª–æ–∫.): –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id} –¥–ª—è user {user_id}, TW {tw_username}: {e_admin}")

                except TelegramBadRequest as e:
                     logging.warning(f"–ò–°–¢–ï–ß–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ user_id={user_id}. –û—à–∏–±–∫–∞: {e}")
                except Exception as e:
                    logging.error(f"–ò–°–¢–ï–ß–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ user_id={user_id}, TW='{tw_username}': {e}")
                await asyncio.sleep(0.1) # –ü–∞—É–∑–∞

    except Exception as e:
        logging.exception(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ check_subscriptions –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö: {expiring_count}, –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_count}.")


# --- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
async def start_scheduler(bot: Bot, texts: dict):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"""
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.sleep(20) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    while True:
        start_time = datetime.now()
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å texts –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await check_subscriptions(bot, texts)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥.")

            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—É—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 —á–∞—Å–∞ –Ω–æ—á–∏)
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
            wait_interval_seconds = 86400 # 24 —á–∞—Å–∞
            # wait_interval_seconds = 3600 # 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∞
            # wait_interval_seconds = 60 # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫)
            # now = datetime.now()
            # next_run = (now + timedelta(days=1)).replace(hour=3, minute=0, second=0, microsecond=0)
            # wait_interval_seconds = (next_run - now).total_seconds()
            # if wait_interval_seconds < 0: # –ï—Å–ª–∏ 3 —á–∞—Å–∞ —É–∂–µ –ø—Ä–æ—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            #     next_run = (now + timedelta(days=2)).replace(hour=3, minute=0, second=0, microsecond=0)
            #     wait_interval_seconds = (next_run - now).total_seconds()

            logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ ~{wait_interval_seconds / 3600:.1f} —á–∞—Å–æ–≤.")
            await asyncio.sleep(wait_interval_seconds)

        except TelegramRetryAfter as e:
             retry_seconds = e.retry_after
             logging.warning(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_seconds} —Å–µ–∫—É–Ω–¥.")
             await asyncio.sleep(retry_seconds)
        except Exception as e:
            logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            # –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            logging.info("–û–∂–∏–¥–∞–Ω–∏–µ 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")
            await asyncio.sleep(3600)