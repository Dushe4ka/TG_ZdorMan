import asyncio
import logging
import os
from datetime import datetime, timedelta
import aiosqlite
from dotenv import load_dotenv

from database import get_user_active_subscription, get_user_payments, get_expired_subscriptions, \
    get_expiring_subscriptions
from aiogram import Bot

load_dotenv()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))


async def notify_admins_about_new_payment(bot: Bot, user_id: int, tx_hash: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    try:
        payment = (await get_user_payments(user_id))[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
        message = (
            "üí∞ *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!*\n"
            f"üë§ ID: `{user_id}`\n"
            f"üë§ TW: {payment[2]}\n"
            f"üîó Hash: `{tx_hash}`\n"
            f"üìÖ –î–∞—Ç–∞: {payment[5]}\n"
            f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {payment[6]}\n"
            f"üíµ –°—É–º–º–∞: {payment[4]} USDT"
        )

        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"Error sending to admin {admin_id}: {e}")

    except Exception as e:
        logging.error(f"Error in notify_admins_about_new_payment: {e}")


async def check_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        expiring = await get_expiring_subscriptions(3)
        for payment in expiring:
            try:
                await bot.send_message(
                    payment[1],  # user_id
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({payment[6]})\n"
                    f"üë§ TW: {payment[2]}\n"
                    f"üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {payment[5]}"
                )
            except Exception as e:
                logging.error(f"Error notifying user {payment[1]}: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        expired = await get_expired_subscriptions()
        for payment in expired:
            try:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    payment[1],
                    f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {payment[6]}\n"
                    f"üë§ TW: {payment[2]}\n"
                    f"üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {payment[5]}"
                )

                # –ê–¥–º–∏–Ω–∞–º
                for admin_id in ADMIN_IDS:
                    await bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n"
                        f"üë§ ID: {payment[1]}\n"
                        f"üë§ @{payment[7]}\n"
                        f"üë§ TW: {payment[2]}\n"
                        f"üìÖ –ë—ã–ª–∞ –¥–æ: {payment[6]}\n"
                        f"üîó –ü–æ—Å–ª–µ–¥–Ω–∏–π hash: {payment[3]}"
                    )
            except Exception as e:
                logging.error(f"Error processing expired sub {payment[1]}: {e}")

    except Exception as e:
        logging.error(f"Error in check_subscriptions: {e}")


async def start_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await check_subscriptions(bot)
            await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        except Exception as e:
            logging.error(f"Scheduler error: {e}")
            await asyncio.sleep(3600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º —á–∞—Å