import os
import logging
import aiosqlite
import json # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup,
    KeyboardButton, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime, timedelta
import asyncio
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatAction # <-- –ò–º–ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from service import notify_admins_about_new_payment, start_scheduler
    from database import (
        init_db as init_database_module,
        save_payment as save_payment_db,
        get_distinct_tw_usernames_with_users,
        get_payments_for_tw_account,
        get_user_language
    )
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã database.py –∏ service.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")
    exit()


load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS")
TRC20_WALLET = os.getenv("TRC20_WALLET")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
DATABASE_FILE = "bot_database.db"
MEDIA_DIR = "media"
CACHE_FILE = "instruction_cache.json" # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, ADMIN_IDS_STR, TRC20_WALLET, ADMIN_USERNAME]):
    logging.error("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, ADMIN_IDS, TRC20_WALLET, ADMIN_USERNAME) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    exit()

try:
    ADMIN_IDS = list(map(int, ADMIN_IDS_STR.split(",")))
except ValueError:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_IDS –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
    exit()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram ---
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ö–µ—à –¥–ª—è file_id –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
instruction_file_ids = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_cache():
    global instruction_file_ids
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'r') as f:
                instruction_file_ids = json.load(f)
            logging.info(f"–ö–µ—à file_id –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {CACHE_FILE}.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à file_id –∏–∑ {CACHE_FILE}: {e}")
            instruction_file_ids = {} # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        logging.info(f"–§–∞–π–ª –∫–µ—à–∞ {CACHE_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–µ—à –ø—É—Å—Ç.")
        instruction_file_ids = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≤ —Ñ–∞–π–ª
def save_cache():
    try:
        with open(CACHE_FILE, 'w') as f:
            json.dump(instruction_file_ids, f, indent=4)
        # logging.info(f"–ö–µ—à file_id –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {CACHE_FILE}.") # –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–µ—à file_id –≤ {CACHE_FILE}: {e}")

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
user_languages = {}

# --- –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã ---
PLANS = {
    "1mo": {"price": 58, "days": 30, "name_en": "1 Month", "name_ru": "1 –ú–µ—Å—è—Ü", "name_es": "1 Mes"},
    "3mo": {"price": 148, "days": 90, "name_en": "3 Months", "name_ru": "3 –ú–µ—Å—è—Ü–∞", "name_es": "3 Meses"},
    "1yr": {"price": 498, "days": 365, "name_en": "1 Year", "name_ru": "1 –ì–æ–¥", "name_es": "1 A√±o"},
}

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã ---
# (PaymentState - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class PaymentState(StatesGroup):
    waiting_for_plan_selection = State()
    waiting_for_tw_username = State()
    waiting_for_hash = State()
    waiting_for_confirmation = State()

# --- –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö ---
# (TEXTS - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
TEXTS = {
    "en": {
        "start": "üåé Choose a language:",
        "welcome": "Welcome to ZdorMan! Here you can pay for access to the TradingView indicator.",
        "instruction_caption": "üìå Here is the instruction manual:",
        "instruction_error": "‚ö†Ô∏è The instruction file could not be found. Please contact support.",
        "choose_plan": "üí≥ Choose your subscription plan:",
        "enter_tw_username": "Enter the TradingView username for which you want to pay:",
        "payment_instructions": "Please send {amount} USDT (TRC-20 network) to the following address:",
        "save_hash": "Save the transaction hash.",
        "enter_hash": "Please send the transaction hash:",
        "payment_received": "‚úÖ Your payment for TradingView account **{tw_username}** has been recorded and will be processed soon.",
        "subscription_expired_for": "‚ùå Your subscription for TradingView account **{tw_username}** has expired on {date}.",
        "subscription_warning_for": "‚ö†Ô∏è Your subscription for TradingView account **{tw_username}** will expire in {days} days on {date}.",
        "generic_subscription_expired": "Your subscription has expired.",
        "generic_subscription_warning": "Your subscription will expire in {days} days on {date}.",
        "support": f"For assistance, please contact @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ Paid",
        "help_button": "üÜò Help",
        "main_menu": ["üìú Instruction", "üí≥ Payment", "üÜò Support"],
        "admin_access_denied": "You don't have access to this command.",
        "no_tw_accounts": "No TradingView accounts found.",
        "select_tw_account": "Select TradingView account:",
        "client_not_found": "TradingView account data not found.",
        "confirm_data": "üìã Please check your details:\n\nüë§ TradingView username: **{tw_username}**\nüí∞ Plan: {plan_name} ({amount} USDT)\nüîó Transaction hash: `{tx_hash}`\n\nIs everything correct?",
        "confirm_yes": "‚úÖ All correct",
        "confirm_no": "‚úèÔ∏è Edit",
        "error_occurred": "An error occurred. Please try again later or contact support.",
        "duplicate_hash": "This transaction hash has already been used. If you believe this is an error, please contact support.",
        "admin_panel_title": "Welcome to the Admin Panel!",
        "admin_list_tw_accounts": "üìã List of TradingView Accounts",
        "admin_client_info_title": "üë§ Account Info: {tw_username}",
        "admin_no_payments": "‚ö†Ô∏è No payments found for this TradingView account.",
        "admin_associated_tg": "üë§ Associated Telegram User",
        "admin_active_subscription": "‚úÖ Active Subscription Until",
        "admin_no_active_subscription": "‚ùå No Active Subscription",
        "admin_total_payments": "üí≥ Total Payments",
        "admin_last_payment": "Last Payment Details",
        "admin_payment_hash": "üîó Hash",
        "admin_payment_amount": "üí∞ Amount",
        "admin_payment_date": "üìÖ Date",
        "admin_payment_sub_end": "‚è≥ Subscription End (this payment)",
        "admin_show_history": "üìú Show Payment History",
        "admin_back_to_list": "‚¨ÖÔ∏è Back to List",
        "admin_back_to_main": "‚¨ÖÔ∏è Back to Main Menu",
        "admin_history_title": "üìú Payment History for {tw_username}",
        "admin_payment_entry": "‚û°Ô∏è Payment #{i}\nüìÖ Date: {date}\nüí∞ Amount: {amount} USDT\nüîó Hash: `{hash}`\n‚è≥ End Date: {end_date}\nüë§ Paid by: @{tg_username} (ID: `{user_id}`)\n",
         "admin_back_to_account": "‚¨ÖÔ∏è Back to Account Info",

    },
    "ru": {
        "start": "üåé –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZdorMan! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É TradingView.",
        "instruction_caption": "üìå –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
        "instruction_error": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "choose_plan": "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        "enter_tw_username": "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º TradingView, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:",
        "payment_instructions": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT (—Å–µ—Ç—å TRC-20) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:",
        "save_hash": "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
        "enter_hash": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        "payment_received": "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView **{tw_username}** –∑–∞–ø–∏—Å–∞–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
        "subscription_expired_for": "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView **{tw_username}** –∏—Å—Ç–µ–∫–ª–∞ {date}.",
        "subscription_warning_for": "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView **{tw_username}** –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω—è(–µ–π) {date}.",
        "generic_subscription_expired": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
        "generic_subscription_warning": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω—è(–µ–π) {date}.",
        "support": f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ –û–ø–ª–∞—Ç–∏–ª",
        "help_button": "üÜò –ü–æ–º–æ—â—å",
        "main_menu": ["üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üí≥ –û–ø–ª–∞—Ç–∞", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
        "admin_access_denied": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
        "no_tw_accounts": "–ê–∫–∫–∞—É–Ω—Ç—ã TradingView –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "select_tw_account": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç TradingView:",
        "client_not_found": "–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "confirm_data": "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüë§ –ê–∫–∫–∞—É–Ω—Ç TradingView: **{tw_username}**\nüí∞ –ü–ª–∞–Ω: {plan_name} ({amount} USDT)\nüîó Transaction hash: `{tx_hash}`\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
        "confirm_yes": "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ",
        "confirm_no": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
        "error_occurred": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "duplicate_hash": "–≠—Ç–æ—Ç —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "admin_panel_title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        "admin_list_tw_accounts": "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ TradingView",
        "admin_client_info_title": "üë§ –ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {tw_username}",
        "admin_no_payments": "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "admin_associated_tg": "üë§ –°–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram",
        "admin_active_subscription": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ",
        "admin_no_active_subscription": "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        "admin_total_payments": "üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π",
        "admin_last_payment": "–î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞",
        "admin_payment_hash": "üîó Hash",
        "admin_payment_amount": "üí∞ –°—É–º–º–∞",
        "admin_payment_date": "üìÖ –î–∞—Ç–∞",
        "admin_payment_sub_end": "‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂)",
        "admin_show_history": "üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π",
        "admin_back_to_list": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        "admin_back_to_main": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "admin_history_title": "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è {tw_username}",
        "admin_payment_entry": "‚û°Ô∏è –ü–ª–∞—Ç–µ–∂ #{i}\nüìÖ –î–∞—Ç–∞: {date}\nüí∞ –°—É–º–º–∞: {amount} USDT\nüîó Hash: `{hash}`\n‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\nüë§ –û–ø–ª–∞—Ç–∏–ª: @{tg_username} (ID: `{user_id}`)\n",
        "admin_back_to_account": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ",
    },
    "es": {
        "start": "üåé Elige un idioma:",
        "welcome": "¬°Bienvenido a ZdorMan! Aqu√≠ puedes pagar el acceso al indicador de TradingView.",
        "instruction_caption": "üìå Aqu√≠ tienes el manual de instrucciones:",
        "instruction_error": "‚ö†Ô∏è No se pudo encontrar el archivo de instrucciones. Por favor, contacta con soporte.",
        "choose_plan": "üí≥ Elige tu plan de suscripci√≥n:",
        "enter_tw_username": "Introduce el nombre de usuario de TradingView para el que deseas pagar:",
        "payment_instructions": "Por favor, env√≠e {amount} USDT (red TRC-20) a la siguiente direcci√≥n:",
        "save_hash": "Guarde el hash de la transacci√≥n.",
        "enter_hash": "Por favor, env√≠e el hash de la transacci√≥n:",
        "payment_received": "‚úÖ Tu pago para la cuenta de TradingView **{tw_username}** ha sido registrado y ser√° procesado pronto.",
        "subscription_expired_for": "‚ùå Tu suscripci√≥n para la cuenta de TradingView **{tw_username}** ha expirado el {date}.",
        "subscription_warning_for": "‚ö†Ô∏è Tu suscripci√≥n para la cuenta de TradingView **{tw_username}** expirar√° en {days} d√≠as el {date}.",
        "generic_subscription_expired": "Su suscripci√≥n ha expirado.",
        "generic_subscription_warning": "Su suscripci√≥n expirar√° en {days} d√≠as el {date}.",
        "support": f"Para asistencia, por favor contacte a @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ Pagado",
        "help_button": "üÜò Soporte",
        "main_menu": ["üìú Instrucci√≥n", "üí≥ Pago", "üÜò Soporte"],
        "admin_access_denied": "No tienes acceso a este comando.",
        "no_tw_accounts": "No se encontraron cuentas de TradingView.",
        "select_tw_account": "Seleccione la cuenta de TradingView:",
        "client_not_found": "Datos de la cuenta de TradingView no encontrados.",
        "confirm_data": "üìã Por favor, verifique sus datos:\n\nüë§ Cuenta TradingView: **{tw_username}**\nüí∞ Plan: {plan_name} ({amount} USDT)\nüîó Hash de transacci√≥n: `{tx_hash}`\n\n¬øTodo correcto?",
        "confirm_yes": "‚úÖ Todo correcto",
        "confirm_no": "‚úèÔ∏è Editar",
        "error_occurred": "Ocurri√≥ un error. Por favor, int√©ntelo de nuevo m√°s tarde o contacte con soporte.",
        "duplicate_hash": "Este hash de transacci√≥n ya ha sido utilizado. Si cree que esto es un error, por favor contacte con soporte.",
        "admin_panel_title": "¬°Bienvenido al Panel de Administraci√≥n!",
        "admin_list_tw_accounts": "üìã Lista de Cuentas de TradingView",
        "admin_client_info_title": "üë§ Info de Cuenta: {tw_username}",
        "admin_no_payments": "‚ö†Ô∏è No se encontraron pagos para esta cuenta de TradingView.",
        "admin_associated_tg": "üë§ Usuario de Telegram Asociado",
        "admin_active_subscription": "‚úÖ Suscripci√≥n Activa Hasta",
        "admin_no_active_subscription": "‚ùå Sin Suscripci√≥n Activa",
        "admin_total_payments": "üí≥ Pagos Totales",
        "admin_last_payment": "Detalles del √öltimo Pago",
        "admin_payment_hash": "üîó Hash",
        "admin_payment_amount": "üí∞ Cantidad",
        "admin_payment_date": "üìÖ Fecha",
        "admin_payment_sub_end": "‚è≥ Fin de Suscripci√≥n (este pago)",
        "admin_show_history": "üìú Mostrar Historial de Pagos",
        "admin_back_to_list": "‚¨ÖÔ∏è Volver a la Lista",
        "admin_back_to_main": "‚¨ÖÔ∏è Volver al Men√∫ Principal",
        "admin_history_title": "üìú Historial de Pagos para {tw_username}",
        "admin_payment_entry": "‚û°Ô∏è Pago #{i}\nüìÖ Fecha: {date}\nüí∞ Cantidad: {amount} USDT\nüîó Hash: `{hash}`\n‚è≥ Fin: {end_date}\nüë§ Pagado por: @{tg_username} (ID: `{user_id}`)\n",
        "admin_back_to_account": "‚¨ÖÔ∏è Volver a Info de Cuenta",
    }
}


# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
INSTRUCTION_FILES = {
    "ru": "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.pdf",
    "es": "instrucciones.pdf",
    "en": "manual.pdf"
}
DEFAULT_INSTRUCTION_FILE = "manual.pdf" # –§–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# (get_lang, get_text - –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def get_lang(user_id: int, state: FSMContext = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM, –∫—ç—à–∞ –∏–ª–∏ –ë–î."""
    if state:
        data = await state.get_data()
        lang = data.get("language")
        if lang:
            return lang
    lang = user_languages.get(user_id)
    if not lang:
        lang = await get_user_language(user_id) # –ó–∞–ø—Ä–æ—Å –∫ –ë–î
        user_languages[user_id] = lang # –ö—ç—à–∏—Ä—É–µ–º
    return lang

def get_text(key: str, lang: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É –∏ —è–∑—ã–∫—É, —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    lang_texts = TEXTS.get(lang)
    if lang_texts:
        text = lang_texts.get(key)
        if text:
            return text
    # –ï—Å–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    en_texts = TEXTS.get("en", {})
    text = en_texts.get(key)
    if text:
        return text
    # –ï—Å–ª–∏ –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return f"<{key}_NOT_FOUND_FOR_LANG_{lang}>"


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# (language_keyboard, main_menu, plans_keyboard - –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_es")
    ]
])

def main_menu(lang):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text("main_menu", lang)[0])],
            [KeyboardButton(text=get_text("main_menu", lang)[1])],
            [KeyboardButton(text=get_text("main_menu", lang)[2])]
        ],
        resize_keyboard=True
    )
    return kb

def plans_keyboard(lang):
    buttons = []
    for plan_id, details in PLANS.items():
        plan_name_key = f"name_{lang}"
        button_text = f"{details.get(plan_name_key, details['name_en'])} - {details['price']} USDT"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"plan_{plan_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞—Ç–µ–∂–∞ ---
# (save_user_and_payment - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def save_user_and_payment(user_id, username, tw_username, tx_hash, amount, purchase_date, subscription_end, language):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
    async with aiosqlite.connect(DATABASE_FILE) as db:
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —è–∑—ã–∫)
        await db.execute('''
            INSERT INTO users (user_id, username, language)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
            username = excluded.username,
            language = excluded.language
        ''', (user_id, username, language))

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        await save_payment_db(db, user_id, tw_username, tx_hash, amount, purchase_date, subscription_end)

        # 3. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.commit()
        logging.info(f"–ü–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id {user_id} –¥–ª—è TW {tw_username} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

# --- /start ---
# (start_cmd - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_id = message.from_user.id
    username = message.from_user.username or f"id_{user_id}"

    async with aiosqlite.connect(DATABASE_FILE) as db:
        await db.execute('''
            INSERT INTO users (user_id, username, language) VALUES (?, ?, 'en')
            ON CONFLICT(user_id) DO UPDATE SET username=excluded.username
        ''', (user_id, username))
        await db.commit()

    lang = await get_lang(user_id)
    user_languages[user_id] = lang

    await message.answer(get_text("start", "en"), reply_markup=language_keyboard)


# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
# (set_language - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    lang = callback.data.split("_")[1]
    user_languages[user_id] = lang
    await state.update_data(language=lang)

    async with aiosqlite.connect(DATABASE_FILE) as db:
        await db.execute('UPDATE users SET language = ? WHERE user_id = ?', (lang, user_id))
        await db.commit()

    await bot.send_message(user_id, get_text("welcome", lang), reply_markup=main_menu(lang))
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" (–ò–ó–ú–ï–ù–ï–ù —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º file_id) ---
@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][0], TEXTS["ru"]["main_menu"][0], TEXTS["es"]["main_menu"][0]
])
async def send_instruction(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(user_id, state)
    instruction_filename = INSTRUCTION_FILES.get(lang, DEFAULT_INSTRUCTION_FILE)
    caption_text = get_text("instruction_caption", lang)
    error_text = get_text("instruction_error", lang) # –¢–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    global instruction_file_ids # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∫–µ—à–µ–º

    cached_file_id = instruction_file_ids.get(instruction_filename)

    if cached_file_id:
        # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id ---
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à file_id –¥–ª—è '{instruction_filename}' (user: {user_id})")
        try:
            await bot.send_document(
                chat_id=user_id,
                document=cached_file_id,
                caption=caption_text
            )
            return # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑ –∫–µ—à–∞
        except TelegramBadRequest as e:
            # –ï—Å–ª–∏ file_id —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º (—Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
            logging.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π file_id '{cached_file_id}' –¥–ª—è '{instruction_filename}': {e}. –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞.")
            del instruction_file_ids[instruction_filename] # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–∑ –∫–µ—à–∞
            save_cache() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à –±–µ–∑ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
        except Exception as e:
             logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ file_id '{cached_file_id}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
             await message.answer(get_text("error_occurred", lang))
             return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ file_id –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º) ---
    file_path = os.path.join(MEDIA_DIR, instruction_filename)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ '{instruction_filename}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—è–∑—ã–∫: {lang}), file_id –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")

    if os.path.exists(file_path):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
            await bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_DOCUMENT)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            document_to_send = FSInputFile(file_path)
            sent_message = await bot.send_document(
                chat_id=user_id,
                document=document_to_send,
                caption=caption_text
            )
            # –ö–µ—à–∏—Ä—É–µ–º file_id, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            if sent_message and sent_message.document:
                new_file_id = sent_message.document.file_id
                instruction_file_ids[instruction_filename] = new_file_id
                save_cache() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω file_id '{new_file_id}' –¥–ª—è '{instruction_filename}'")
            else:
                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{instruction_filename}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ '{file_path}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer(get_text("error_occurred", lang)) # –û–±—â–∞—è –æ—à–∏–±–∫–∞
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        logging.warning(f"–§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path} (—è–∑—ã–∫: {lang})")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        default_file_path = os.path.join(MEDIA_DIR, DEFAULT_INSTRUCTION_FILE)
        default_caption = get_text("instruction_caption", 'en')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ file_id –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–µ—à–µ
        cached_default_id = instruction_file_ids.get(DEFAULT_INSTRUCTION_FILE)
        if cached_default_id:
             logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{DEFAULT_INSTRUCTION_FILE}' –∏–∑ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
             try:
                 await bot.send_document(
                     chat_id=user_id,
                     document=cached_default_id,
                     caption=default_caption
                 )
                 return # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞
             except TelegramBadRequest as e:
                 logging.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π file_id '{cached_default_id}' –¥–ª—è default '{DEFAULT_INSTRUCTION_FILE}': {e}. –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞.")
                 if DEFAULT_INSTRUCTION_FILE in instruction_file_ids:
                      del instruction_file_ids[DEFAULT_INSTRUCTION_FILE]
                      save_cache()
                 # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
             except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ default –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ file_id '{cached_default_id}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                 await message.answer(error_text) # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –¥–∞–∂–µ –∫–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                 return

        # –ï—Å–ª–∏ –∫–µ—à–∞ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Å—Ç–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
        if lang != 'en' and os.path.exists(default_file_path):
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{DEFAULT_INSTRUCTION_FILE}' (—Ñ–∞–π–ª) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            try:
                await bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_DOCUMENT)
                document_to_send = FSInputFile(default_file_path)
                sent_message = await bot.send_document(
                    chat_id=user_id,
                    document=document_to_send,
                    caption=default_caption
                )
                # –ö–µ—à–∏—Ä—É–µ–º file_id –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if sent_message and sent_message.document:
                    new_file_id = sent_message.document.file_id
                    instruction_file_ids[DEFAULT_INSTRUCTION_FILE] = new_file_id
                    save_cache()
                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω file_id '{new_file_id}' –¥–ª—è default '{DEFAULT_INSTRUCTION_FILE}'")
                else:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ default '{DEFAULT_INSTRUCTION_FILE}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{default_file_path}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                 await message.answer(error_text) # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–µ —É—à–µ–ª
        else:
            # –ï—Å–ª–∏ –∏ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ —è–∑—ã–∫ –∏ —Ç–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
             logging.error(f"–§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{DEFAULT_INSTRUCTION_FILE}' —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             await message.answer(error_text)


# --- –ü—Ä–æ—Ü–µ—Å—Å –û–ø–ª–∞—Ç—ã ---
# (start_payment_process, process_plan_selection, process_tw_username,
#  process_paid_button, process_hash, confirm_payment, reject_payment - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# 1. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞" -> –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω
@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][1], TEXTS["ru"]["main_menu"][1], TEXTS["es"]["main_menu"][1]
])
async def start_payment_process(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(user_id, state)
    await message.answer(get_text("choose_plan", lang), reply_markup=plans_keyboard(lang))
    await state.set_state(PaymentState.waiting_for_plan_selection)

# 2. –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ -> –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º TW Username
@dp.callback_query(PaymentState.waiting_for_plan_selection, lambda c: c.data.startswith("plan_"))
async def process_plan_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    plan_id = callback.data.split("_")[1]
    lang = await get_lang(user_id, state)

    if plan_id not in PLANS:
        await callback.answer("Invalid plan selected.", show_alert=True)
        return

    selected_plan = PLANS[plan_id]
    await state.update_data(plan_id=plan_id, amount=selected_plan["price"], days=selected_plan["days"])

    await callback.message.edit_text(get_text("enter_tw_username", lang)) # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º TW Username
    await state.set_state(PaymentState.waiting_for_tw_username) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é TW Username
    await callback.answer()

# 3. –í–≤–æ–¥ TW Username -> –°–æ—Ö—Ä–∞–Ω—è–µ–º TW Username, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ–ø–ª–∞—Ç–µ
@dp.message(PaymentState.waiting_for_tw_username)
async def process_tw_username(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tw_username = message.text.strip() # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not tw_username:
         lang = await get_lang(user_id, state)
         await message.answer(get_text("enter_tw_username", lang)) # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
         return

    await state.update_data(tw_username=tw_username)
    user_data = await state.get_data()
    amount = user_data.get("amount")
    lang = await get_lang(user_id, state)

    instruction_text = get_text("payment_instructions", lang).format(amount=amount)
    caption = f"{instruction_text}\n\n`{TRC20_WALLET}`\n\n{get_text('save_hash', lang)}"
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text("paid_button", lang), callback_data="paid")],
        [InlineKeyboardButton(text=get_text("help_button", lang), url=f"https://t.me/{ADMIN_USERNAME}")]
    ])

    try:
        photo_path = os.path.join(MEDIA_DIR, "1.jpg")
        if os.path.exists(photo_path):
            photo = FSInputFile(photo_path)
            await bot.send_photo(
                chat_id=user_id, photo=photo, caption=caption,
                parse_mode="Markdown", reply_markup=reply_markup
            )
        else:
             logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
             await message.answer(caption, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –¥–ª—è user {user_id}: {e}")
        await message.answer(caption, parse_mode="Markdown", reply_markup=reply_markup) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    await state.set_state(PaymentState.waiting_for_hash) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ö–µ—à–∞

# 4. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" -> –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ö–µ—à
@dp.callback_query(PaymentState.waiting_for_hash, lambda c: c.data == "paid")
async def process_paid_button(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    lang = await get_lang(user_id, state)
    try:
        await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–û–ø–ª–∞—Ç–∏–ª': {e}")
    await bot.send_message(user_id, get_text("enter_hash", lang))
    await callback.answer()

# 5. –í–≤–æ–¥ —Ö–µ—à–∞ -> –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(PaymentState.waiting_for_hash)
async def process_hash(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tx_hash = message.text.strip()
    if not tx_hash: # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        lang = await get_lang(user_id, state)
        await message.answer(get_text("enter_hash", lang))
        return

    await state.update_data(tx_hash=tx_hash)
    data = await state.get_data()
    tw_username = data.get("tw_username")
    plan_id = data.get("plan_id")
    amount = data.get("amount")
    lang = await get_lang(user_id, state)

    plan_name_key = f"name_{lang}"
    plan_name = PLANS.get(plan_id, {}).get(plan_name_key, "Unknown Plan")

    confirmation_message = get_text("confirm_data", lang).format(
        tw_username=tw_username,
        plan_name=plan_name,
        amount=amount,
        tx_hash=tx_hash
    )
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("confirm_yes", lang), callback_data="confirm_yes"),
            InlineKeyboardButton(text=get_text("confirm_no", lang), callback_data="confirm_no")
        ]
    ])

    await message.answer(confirmation_message, reply_markup=confirmation_keyboard, parse_mode="Markdown")
    await state.set_state(PaymentState.waiting_for_confirmation)

# 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ("–í—Å–µ –≤–µ—Ä–Ω–æ") -> –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂, —É–≤–µ–¥–æ–º–ª—è–µ–º
@dp.callback_query(PaymentState.waiting_for_confirmation, lambda c: c.data == "confirm_yes")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or f"id_{user_id}"
    data = await state.get_data()
    tw_username = data.get("tw_username")
    tx_hash = data.get("tx_hash")
    amount = data.get("amount")
    days = data.get("days")
    lang = await get_lang(user_id, state)

    if not all([tw_username, tx_hash, amount, days]):
         logging.error(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è user_id {user_id}. Data: {data}")
         await callback.message.edit_text(get_text("error_occurred", lang))
         await state.clear()
         await callback.answer("–û—à–∏–±–∫–∞!", show_alert=True)
         return

    purchase_date = datetime.now().strftime("%Y-%m-%d")
    subscription_end = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")

    try:
        await save_user_and_payment(
            user_id=user_id,
            username=username,
            tw_username=tw_username,
            tx_hash=tx_hash,
            amount=amount,
            purchase_date=purchase_date,
            subscription_end=subscription_end,
            language=lang # –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        await callback.message.edit_text(
             get_text("payment_received", lang).format(tw_username=tw_username),
             parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_new_payment(
            bot, user_id, tw_username, tx_hash, amount, purchase_date, subscription_end
        )

    except aiosqlite.IntegrityError:
         logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ö–µ—à–µ–º: {tx_hash} –æ—Ç user_id {user_id}")
         await callback.message.edit_text(get_text("duplicate_hash", lang))
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
        await callback.message.edit_text(get_text("error_occurred", lang))
    finally:
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
        await callback.answer()

# 7. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ("–ò–∑–º–µ–Ω–∏—Ç—å") -> –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞
@dp.callback_query(PaymentState.waiting_for_confirmation, lambda c: c.data == "confirm_no")
async def reject_payment(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    lang = await get_lang(user_id, state)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –Ω–∞—á–∞–ª—É - –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞
    await callback.message.edit_text(get_text("choose_plan", lang), reply_markup=plans_keyboard(lang))
    # –î–∞–Ω–Ω—ã–µ –≤ state —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–π–¥–µ—Ç —Ñ–ª–æ—É –∑–∞–Ω–æ–≤–æ
    await state.set_state(PaymentState.waiting_for_plan_selection)
    await callback.answer()


# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
# (support_handler - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][2], TEXTS["ru"]["main_menu"][2], TEXTS["es"]["main_menu"][2]
])
async def support_handler(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_user.id, state)
    await message.answer(get_text("support", lang))

# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========
# (admin_panel, list_tw_accounts, client_info, payment_history, admin_back_to_main - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        lang = await get_lang(user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±–∏—Ä–∞–ª
        await message.answer(
            get_text("admin_panel_title", lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=get_text("admin_list_tw_accounts", lang), callback_data="list_tw_accounts")]
            ]))
    else:
        lang = await get_lang(user_id)
        await message.answer(get_text("admin_access_denied", lang))

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ TradingView
@dp.callback_query(lambda c: c.data == "list_tw_accounts")
async def list_tw_accounts(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    lang = await get_lang(user_id)

    accounts = await get_distinct_tw_usernames_with_users()
    # accounts: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(tw_username, tg_user_id, tg_username)]

    if not accounts:
        await callback.message.edit_text(get_text("no_tw_accounts", lang))
        await callback.answer()
        return

    buttons = []
    for tw_user, tg_id, tg_user in accounts:
        btn_text = f"{tw_user}"
        if tg_user:
            btn_text += f" (@{tg_user})"
        elif tg_id:
             btn_text += f" (ID: {tg_id})"

        buttons.append([InlineKeyboardButton(
            text=btn_text,
            # –í callback –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ tw_username, —Ç.–∫. –æ–Ω –∫–ª—é—á –¥–ª—è —Å–ª–µ–¥. —à–∞–≥–∞
            callback_data=f"client_{tw_user}"
        )])

    buttons.append([InlineKeyboardButton(text=get_text("admin_back_to_main", lang), callback_data="admin_back_to_main")])

    await callback.message.edit_text(
        get_text("select_tw_account", lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ TradingView
@dp.callback_query(lambda c: c.data.startswith("client_"))
async def client_info(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    lang = await get_lang(user_id)

    tw_username = callback.data.split("_", 1)[1] # –ü–æ–ª—É—á–∞–µ–º tw_username
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ TW –∞–∫–∫–∞—É–Ω—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    payments = await get_payments_for_tw_account(tw_username)
    # payments: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(id, user_id, tw_username, tx_hash, amount, purchase_date, subscription_end, tg_username)]

    if not payments:
        await callback.message.edit_text(get_text("admin_no_payments", lang))
        await callback.answer()
        return

    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    last_payment = payments[0]
    tg_user_id = last_payment[1]
    tg_username_display = last_payment[7] if last_payment[7] else f"`{tg_user_id}`" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ TW –∞–∫–∫–∞—É–Ω—Ç–∞
    active_sub_end = None
    current_date_str = datetime.now().strftime("%Y-%m-%d")
    # –ò—â–µ–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    for p in payments:
        if p[6] >= current_date_str: # p[6] is subscription_end
            if active_sub_end is None or p[6] > active_sub_end:
                 active_sub_end = p[6]

    active_sub_status = f"{get_text('admin_active_subscription', lang)}: *{active_sub_end}*" if active_sub_end \
                       else get_text("admin_no_active_subscription", lang)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"{get_text('admin_client_info_title', lang).format(tw_username=tw_username)}\n\n" \
                   f"{get_text('admin_associated_tg', lang)}: @{tg_username_display}\n" \
                   f"{active_sub_status}\n" \
                   f"{get_text('admin_total_payments', lang)}: {len(payments)}\n\n" \
                   f"*{get_text('admin_last_payment', lang)}:*\n" \
                   f"{get_text('admin_payment_hash', lang)}: `{last_payment[3]}`\n" \
                   f"{get_text('admin_payment_amount', lang)}: {last_payment[4]} USDT\n" \
                   f"{get_text('admin_payment_date', lang)}: {last_payment[5]}\n" \
                   f"{get_text('admin_payment_sub_end', lang)}: {last_payment[6]}"

    # –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=get_text("admin_show_history", lang),
            callback_data=f"history_{tw_username}"
        )],
        [InlineKeyboardButton(text=get_text("admin_back_to_list", lang), callback_data="list_tw_accounts")]
    ])

    await callback.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
    await callback.answer()

# –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ TradingView
@dp.callback_query(lambda c: c.data.startswith("history_"))
async def payment_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    lang = await get_lang(user_id)

    tw_username = callback.data.split("_", 1)[1]
    payments = await get_payments_for_tw_account(tw_username) # –ó–∞–ø—Ä–æ—Å —Ç–æ—Ç –∂–µ

    if not payments:
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å —ç–∫—Ä–∞–Ω–∞ client_info, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await callback.message.edit_text(get_text("admin_no_payments", lang))
        await callback.answer()
        return

    message_text = f"{get_text('admin_history_title', lang).format(tw_username=tw_username)}\n\n"

    for i, p in enumerate(payments, 1):
        # p: (id, user_id, tw_username, tx_hash, amount, purchase_date, subscription_end, tg_username)
        tg_user_display = p[7] if p[7] else '–Ω–µ—Ç'
        message_text += get_text("admin_payment_entry", lang).format(
            i=i,
            date=p[5],
            amount=p[4],
            hash=p[3],
            end_date=p[6],
            tg_username=tg_user_display,
            user_id=p[1]
        )

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    kb = InlineKeyboardMarkup(inline_keyboard=[
         [InlineKeyboardButton(text=get_text("admin_back_to_account", lang), callback_data=f"client_{tw_username}")]
    ])

    try:
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
         await callback.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if "message is too long" in str(e):
             logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {tw_username} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
             await callback.message.answer(f"{get_text('admin_history_title', lang).format(tw_username=tw_username)}\n\n" \
                                           f"–ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=kb)
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await callback.answer(get_text("error_occurred", lang), show_alert=True)

    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(lambda c: c.data == "admin_back_to_main")
async def admin_back_to_main(callback: types.CallbackQuery):
     user_id = callback.from_user.id
     if user_id not in ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
     lang = await get_lang(user_id)
     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —Å–Ω–æ–≤–∞
     await callback.message.edit_text(
            get_text("admin_panel_title", lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=get_text("admin_list_tw_accounts", lang), callback_data="list_tw_accounts")]
            ]))
     await callback.answer()

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à file_id –∏–∑ —Ñ–∞–π–ª–∞
    load_cache()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_database_module()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    async with aiosqlite.connect(DATABASE_FILE) as db:
        async with db.execute("SELECT user_id, language FROM users WHERE language IS NOT NULL") as cursor:
            rows = await cursor.fetchall()
            for row in rows:
                user_languages[row[0]] = row[1]
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_languages)} —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(start_scheduler(bot, TEXTS))
    logging.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞...")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
    # dp.shutdown.register(save_cache) # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ asyncio.run? –ü—Ä–æ—â–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.

    try:
        await dp.start_polling(bot)
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ KeyboardInterrupt)
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à file_id...")
        save_cache()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    if not os.path.exists(MEDIA_DIR):
        os.makedirs(MEDIA_DIR)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {MEDIA_DIR}")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
         logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")