import os
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime, timedelta
import asyncio
from aiogram.types import FSInputFile
from service import notify_admins_about_new_payment, start_scheduler
from database import get_all_clients, get_client_payments

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))
TRC20_WALLET = os.getenv("TRC20_WALLET")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
user_languages = {}


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
class PaymentState(StatesGroup):
    waiting_for_username = State()
    waiting_for_hash = State()
    waiting_for_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "en": {
        "start": "üåé Choose a language:",
        "welcome": "Welcome to ZdorMan! You can pay for access to the TradingView indicator.",
        "instruction": "üìå Instruction: [Click here](https://t.me/c/2063756053/31)",
        "enter_username": "Enter your TradingView username:",
        "payment_instructions": "Please send 35 USDT (TRC-20 network) to the following address:",
        "save_hash": "Save the transaction hash.",
        "enter_hash": "Please send the transaction hash:",
        "payment_received": "‚úÖ Your payment has been recorded and will be processed soon.",
        "subscription_expired": "Your subscription has expired.",
        "subscription_warning": "Your subscription will expire in {days} days on {date}.",
        "support": f"For assistance, please contact @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ Paid",
        "help_button": "üÜò Help",
        "main_menu": ["üìú Instruction", "üí≥ Payment", "üÜò Support"],
        "admin_access_denied": "You don't have access to this command.",
        "no_clients": "No clients.",
        "select_client": "Select client:",
        "client_not_found": "Client not found.",
        "confirm_data": "üìã Please check your details:\n\nüë§ TradingView username: {username}\nüîó Transaction hash: {tx_hash}\n\nIs everything correct?",
        "confirm_yes": "‚úÖ All correct",
        "confirm_no": "‚úèÔ∏è Edit"
    },
    "ru": {
        "start": "üåé –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZdorMan! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É TradingView.",
        "instruction": "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://t.me/c/2063756053/31)",
        "enter_username": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º TradingView:",
        "payment_instructions": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 35 USDT (—Å–µ—Ç—å TRC-20) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:",
        "save_hash": "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
        "enter_hash": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        "payment_received": "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
        "subscription_expired": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
        "subscription_warning": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω—è(–µ–π) {date}.",
        "support": f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ –û–ø–ª–∞—Ç–∏–ª",
        "help_button": "üÜò –ü–æ–º–æ—â—å",
        "main_menu": ["üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üí≥ –û–ø–ª–∞—Ç–∞", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
        "admin_access_denied": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
        "no_clients": "–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.",
        "select_client": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        "client_not_found": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "confirm_data": "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüë§ TradingView username: {username}\nüîó Transaction hash: {tx_hash}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
        "confirm_yes": "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ",
        "confirm_no": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"
    },
    "es": {
        "start": "üåé Elige un idioma:",
        "welcome": "¬°Bienvenido a ZdorMan! Aqu√≠ puedes pagar el acceso al indicador de TradingView.",
        "instruction": "üìå Instrucci√≥n: [Haz clic aqu√≠](https://t.me/c/2063756053/31)",
        "enter_username": "Ingrese su nombre de usuario de TradingView:",
        "payment_instructions": "Por favor, env√≠e 35 USDT (red TRC-20) a la siguiente direcci√≥n:",
        "save_hash": "Guarde el hash de la transacci√≥n.",
        "enter_hash": "Por favor, env√≠e el hash de la transacci√≥n:",
        "payment_received": "‚úÖ Su pago ha sido registrado y ser√° procesado pronto.",
        "subscription_expired": "Su suscripci√≥n ha expirado.",
        "subscription_warning": "Su suscripci√≥n expirar√° en {days} d√≠as el {date}.",
        "support": f"Para asistencia, por favor contacte a @{ADMIN_USERNAME}",
        "paid_button": "‚úÖ Pagado",
        "help_button": "üÜò Soporte",
        "main_menu": ["üìú Instrucci√≥n", "üí≥ Pago", "üÜò Soporte"],
        "admin_access_denied": "No tienes acceso a este comando.",
        "no_clients": "No hay clientes.",
        "select_client": "Seleccione cliente:",
        "client_not_found": "Cliente no encontrado.",
        "confirm_data": "üìã Por favor, verifique sus datos:\n\nüë§ Nombre de usuario de TradingView: {username}\nüîó Hash de transacci√≥n: {tx_hash}\n\n¬øTodo correcto?",
        "confirm_yes": "‚úÖ Todo correcto",
        "confirm_no": "‚úèÔ∏è Editar"
    }
}

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_es")
    ]
])


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(lang):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=TEXTS[lang]["main_menu"][0])],
            [KeyboardButton(text=TEXTS[lang]["main_menu"][1])],
            [KeyboardButton(text=TEXTS[lang]["main_menu"][2])]
        ],
        resize_keyboard=True
    )
    return kb


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("bot_database.db") as db:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                language TEXT DEFAULT 'en'
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                tw_username TEXT,
                tx_hash TEXT,
                amount REAL,
                purchase_date TEXT,
                subscription_end TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        await db.commit()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞—Ç–µ–∂–∞
async def save_user_payment(user_id, username, tw_username, tx_hash, purchase_date, subscription_end):
    async with aiosqlite.connect("bot_database.db") as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await db.execute('''
            INSERT INTO users (user_id, username)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
            username = excluded.username
        ''', (user_id, username))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        await db.execute('''
            INSERT INTO payments (user_id, tw_username, tx_hash, amount, purchase_date, subscription_end)
            VALUES (?, ?, ?, 35, ?, ?)
        ''', (user_id, tw_username, tx_hash, purchase_date, subscription_end))
        await db.commit()


# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_active_subscription(user_id):
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute('''
            SELECT * FROM payments 
            WHERE user_id = ? 
            AND subscription_end >= date('now')
            ORDER BY subscription_end DESC
            LIMIT 1
        ''', (user_id,)) as cursor:
            return await cursor.fetchone()


# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_payments(user_id):
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute('''
            SELECT * FROM payments 
            WHERE user_id = ?
            ORDER BY purchase_date DESC
        ''', (user_id,)) as cursor:
            return await cursor.fetchall()


# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_all_users():
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT tw_username FROM payments GROUP BY tw_username") as cursor:
            return await cursor.fetchall()


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –Ω–∞ TradingView
async def get_user_data_by_tw_username(tw_username):
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute('''
            SELECT p.*, u.username 
            FROM payments p
            JOIN users u ON p.user_id = u.user_id
            WHERE p.tw_username = ?
            ORDER BY p.subscription_end DESC
            LIMIT 1
        ''', (tw_username,)) as cursor:
            return await cursor.fetchone()


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
async def notify_subscription(user_id, lang):
    subscription = await get_user_active_subscription(user_id)
    if not subscription:
        await bot.send_message(user_id, TEXTS[lang]["subscription_expired"])
        return

    subscription_end = datetime.strptime(subscription[6], "%Y-%m-%d")
    if datetime.now() >= subscription_end:
        await bot.send_message(user_id, TEXTS[lang]["subscription_expired"])
    elif datetime.now() >= subscription_end - timedelta(days=3):
        warning_msg = TEXTS[lang]["subscription_warning"].format(
            days=3,
            date=subscription_end.strftime("%Y-%m-%d")
        )
        await bot.send_message(user_id, warning_msg)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def scheduler():
    while True:
        async with aiosqlite.connect("bot_database.db") as db:
            async with db.execute("SELECT user_id, language FROM users") as cursor:
                users = await cursor.fetchall()
                for user in users:
                    await notify_subscription(user[0], user[1] if user[1] else "en")
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(TEXTS["en"]["start"], reply_markup=language_keyboard)


@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_languages[callback.from_user.id] = lang

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute('''
            INSERT INTO users (user_id, username, language)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
            username = excluded.username,
            language = excluded.language
        ''', (callback.from_user.id, callback.from_user.username, lang))
        await db.commit()

    await bot.send_message(callback.from_user.id, TEXTS[lang]["welcome"], reply_markup=main_menu(lang))
    await callback.answer()


@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][0],
    TEXTS["ru"]["main_menu"][0],
    TEXTS["es"]["main_menu"][0]
])
async def send_instruction(message: types.Message):
    lang = user_languages.get(message.from_user.id, "en")
    await message.answer(TEXTS[lang]["instruction"], parse_mode="Markdown")


@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][1],
    TEXTS["ru"]["main_menu"][1],
    TEXTS["es"]["main_menu"][1]
])
async def request_username(message: types.Message, state: FSMContext):
    lang = user_languages.get(message.from_user.id, "en")
    await message.answer(TEXTS[lang]["enter_username"])
    await state.set_state(PaymentState.waiting_for_username)


@dp.message(PaymentState.waiting_for_username)
async def request_transaction_hash(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    lang = user_languages.get(message.from_user.id, "en")

    try:
        photo = FSInputFile("media/1.jpg")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=f"{TEXTS[lang]['payment_instructions']}\n\n`{TRC20_WALLET}`\n\n{TEXTS[lang]['save_hash']}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=TEXTS[lang]["paid_button"], callback_data="paid")],
                [InlineKeyboardButton(text=TEXTS[lang]["help_button"], url=f"https://t.me/{ADMIN_USERNAME}")]
            ]))
    except Exception as e:
        logging.error(f"Error sending photo: {e}")
        await message.answer(f"{TEXTS[lang]['payment_instructions']}\n\n`{TRC20_WALLET}`")

    await state.set_state(PaymentState.waiting_for_hash)


@dp.callback_query(lambda c: c.data == "paid")
async def process_paid(callback: types.CallbackQuery, state: FSMContext):
    lang = user_languages.get(callback.from_user.id, "en")
    await bot.send_message(callback.from_user.id, TEXTS[lang]["enter_hash"])
    await callback.answer()


@dp.message(PaymentState.waiting_for_hash)
async def process_payment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    tx_hash = message.text
    lang = user_languages.get(message.from_user.id, "en")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(tx_hash=tx_hash)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_message = TEXTS[lang]["confirm_data"].format(
        username=username,
        tx_hash=tx_hash
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=TEXTS[lang]["confirm_yes"], callback_data="confirm_yes"),
            InlineKeyboardButton(text=TEXTS[lang]["confirm_no"], callback_data="confirm_no")
        ]
    ])

    await message.answer(confirmation_message, reply_markup=confirmation_keyboard)
    await state.set_state(PaymentState.waiting_for_confirmation)


@dp.callback_query(PaymentState.waiting_for_confirmation, lambda c: c.data == "confirm_yes")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    tx_hash = data.get("tx_hash")
    lang = user_languages.get(callback.from_user.id, "en")

    purchase_date = datetime.now().strftime("%Y-%m-%d")
    subscription_end = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")

    await save_user_payment(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        tw_username=username,
        tx_hash=tx_hash,
        purchase_date=purchase_date,
        subscription_end=subscription_end
    )

    await callback.message.edit_text(TEXTS[lang]["payment_received"])
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    await notify_admins_about_new_payment(bot, callback.from_user.id, tx_hash)
    await callback.answer()


@dp.callback_query(PaymentState.waiting_for_confirmation, lambda c: c.data == "confirm_no")
async def reject_payment(callback: types.CallbackQuery, state: FSMContext):
    lang = user_languages.get(callback.from_user.id, "en")
    await callback.message.edit_text(TEXTS[lang]["enter_username"])
    await state.set_state(PaymentState.waiting_for_username)
    await callback.answer()


@dp.message(lambda message: message.text in [
    TEXTS["en"]["main_menu"][2],
    TEXTS["ru"]["main_menu"][2],
    TEXTS["es"]["main_menu"][2]
])
async def support_handler(message: types.Message):
    lang = user_languages.get(message.from_user.id, "en")
    await message.answer(TEXTS[lang]["support"])


# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_clients")]
            ]))
    else:
        await message.answer(TEXTS["ru"]["admin_access_denied"])


@dp.callback_query(lambda c: c.data == "list_clients")
async def list_clients(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = await get_all_clients()

    if not clients:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
        await callback.answer()
        return

    buttons = []
    for client in clients:
        # client: (user_id, tg_username, tw_username)
        btn_text = f"{client[2]}"  # tw_username
        if client[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å telegram username
            btn_text += f" (@{client[1]})"

        buttons.append(
            [InlineKeyboardButton(
                text=btn_text,
                callback_data=f"client_{client[2]}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tw_username –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            )]
        )

    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("client_"))
async def client_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    tw_username = callback.data.split("_")[1]
    payments = await get_client_payments(tw_username)

    if not payments:
        await callback.message.answer("‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
        await callback.answer()
        return

    # –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –¥–∞—Ç–µ)
    last_payment = payments[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message = (
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {tw_username}\n"
        f"üì± Telegram: @{last_payment[7] if last_payment[7] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üî¢ ID: {last_payment[1]}\n\n"
        f"üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂:\n"
        f"üîó Hash: {last_payment[3]}\n"
        f"üí∞ –°—É–º–º–∞: {last_payment[4]} USDT\n"
        f"üìÖ –î–∞—Ç–∞: {last_payment[5]}\n"
        f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {last_payment[6]}"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π",
            callback_data=f"history_{tw_username}"
        )]
    ])

    await callback.message.answer(message, reply_markup=kb)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("history_"))
async def payment_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    tw_username = callback.data.split("_")[1]
    payments = await get_client_payments(tw_username)

    if not payments:
        await callback.message.answer("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞")
        await callback.answer()
        return

    message = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è {tw_username}:\n\n"

    for i, payment in enumerate(payments, 1):
        message += (
            f"‚û°Ô∏è –ü–ª–∞—Ç–µ–∂ #{i}\n"
            f"üìÖ –î–∞—Ç–∞: {payment[5]}\n"
            f"üí∞ –°—É–º–º–∞: {payment[4]} USDT\n"
            f"üîó Hash: {payment[3]}\n"
            f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {payment[6]}\n\n"
        )

    await callback.message.answer(message)
    await callback.answer()


async def main():
    await init_db()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(start_scheduler(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())